#!/usr/bin/env python

from os import mkfifo, unlink
from os.path import exists
from signal import signal, SIGINT, SIGQUIT
from subprocess import check_output, check_call
from sys import exit

fifo_path = '/tmp/db'
DB_NAME = 'rebase_parallel'
TEST_URL='postgresql://localhost/'+DB_NAME

def quit(signal, frame):
    unlink(fifo_path)
    exit(0)

def db_exists(db_name):
    output = check_output(['psql', '-lqt']).decode(encoding='UTF-8').splitlines()
    return any(map(lambda line: line.lstrip().startswith(db_name), output))

def createdb(db_name):
    check_call(['createdb', db_name])

def run():
    if not db_exists(DB_NAME):
        print(DB_NAME+' does not exists, let\'s create it.')
        createdb(DB_NAME)
    else:
        print(DB_NAME+' already exists.')
    if not exists(fifo_path):
        mkfifo(fifo_path)
    signal(SIGINT, quit)
    while True:
        print('about to open /tmp/db')
        try:
            with open(fifo_path, 'w') as fifo:
                print('about to write to /tmp/db')
                n = fifo.write(TEST_URL+'\n')
                print('wrote {} characters'.format(n))
                print('closing /tmp/db')
        except BrokenPipeError:
            print('BrokenPipeError')
            continue

if __name__ == '__main__':
    run()
