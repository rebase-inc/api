#! /venv/api/bin/python

'''
Usage: filter <user_id> <git_cmd> <git_dir>

user_id: the id of the the Rebase user that owns the SSH public key used to create the SSH connection
git_cmd: must be in ['git-receive-pack', 'git-upload-archive', 'git-upload-pack']
git_dir: a valid git repository path on this server.
'''

from logging import basicConfig, warning, WARNING
from os.path import exists, join
from subprocess import call
from sys import argv, exit

GIT_ROOT='/git'
error_log = '/var/log/filter/error.log'
basicConfig(filename=error_log, level=WARNING, format='%(asctime)s %(message)s')
    
class FilterException(Exception):
    error_message = 'FilterException base class message '
    message_format = '{error_message}\nArguments:\n{argv}\nExit code: {code}'
    code = 255

    def __init__(self):
        self.message = self.message_format.format(
            error_message=self.error_message,
            argv=argv,
            code=self.code
        )

class MissingArguments(FilterException):
    error_message = 'Missing arguments'
    code = 1

class InvalidGitDirectoryTooShort(FilterException):
    error_message = 'Invalid Git directory: too short'
    code = 2

class InvalidCommand(FilterException):
    error_message = 'Invalid command'
    code = 4

class GitDirDoesNotExist(FilterException):
    error_message = 'Git directory does not exist'
    code = 5

class MissingAuthorizedUsersFile(FilterException):
    error_message = 'Missing authorized_users file'
    code = 6

class UnauthorizedUser(FilterException):
    error_message = 'Unauthorized user'
    code = 7


def main(argv):
    valid_commands = ['git-receive-pack', 'git-upload-archive', 'git-upload-pack']
    if len(argv) != 4:
        raise MissingArguments()
    user_id = int(argv[1])
    git_cmd = argv[2]
    if len(argv[3]) < 6:
        raise InvalidGitDirectoryTooShort()
    # the [1:-1] index is to remove the extraneous double-quotes around the string
    git_dir = join(GIT_ROOT, argv[3][1:-1])
    if git_cmd not in valid_commands:
        raise InvalidCommand()
    if not exists(git_dir):
        raise GitDirDoesNotExist()
    user_ids_path = join(git_dir, '.git', 'authorized_users')
    if not exists(user_ids_path):
        raise MissingAuthorizedUsersFile()
    user_ids = []
    authenticated = False
    with open(user_ids_path, 'r') as f:
        for line in f:
            if int(line) == user_id:
                authenticated = True
                break

    if not authenticated:
        raise UnauthorizedUser()
    warning('Successfull authentication with: {}'.format(argv))

    original_cmd = [git_cmd, git_dir]
    call(original_cmd)

if __name__ == '__main__':
    try:
        main(argv)
    except FilterException as e:
        warning(e.message)
        exit(e.code)
