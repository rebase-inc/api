#! /venv/api/bin/python

'''
Usage: filter <user_id> <git_cmd> <git_dir>

user_id: the id of the the Rebase user that owns the SSH public key used to create the SSH connection
git_cmd: must be in ['git-receive-pack', 'git-upload-archive', 'git-upload-pack']
git_dir: a valid git repository path on this server.
'''

from logging import Formatter, getLogger, DEBUG
from logging.handlers import SysLogHandler
from multiprocessing import current_process
from os.path import exists, join
from subprocess import call
from sys import argv, exit


current_process().name = 'SSH -> Rebase filter'


GIT_ROOT='/git'


logger = getLogger()
logger.setLevel(DEBUG)
rsyslog = SysLogHandler(('rsyslog', 514))
rsyslog.setFormatter(Formatter('%(levelname)s {%(processName)s[%(process)d] %(threadName)s} %(message)s'))
logger.addHandler(rsyslog)

    
class FilterException(Exception):
    error_message = 'FilterException base class message '
    message_format = '{error_message} {argv} exit: {code}'
    code = 255

    def __init__(self):
        self.message = self.message_format.format(
            error_message=self.error_message,
            argv=argv,
            code=self.code
        )


class MissingArguments(FilterException):
    error_message = 'Missing arguments'
    code = 1


class InvalidGitDirectoryTooShort(FilterException):
    error_message = 'Invalid Git directory: too short'
    code = 2


class InvalidCommand(FilterException):
    error_message = 'Invalid command'
    code = 4


class GitDirDoesNotExist(FilterException):
    error_message = 'Git directory does not exist'
    code = 5


class MissingAuthorizedUsersFile(FilterException):
    error_message = 'Missing authorized_users file'
    code = 6


class UnauthorizedUser(FilterException):
    error_message = 'Unauthorized user'
    code = 7


class TooManyArguments(FilterException):
    error_message = 'Too many arguments'
    code = 8


class CannotParseUserId(FilterException):
    error_message = 'Cannot parse the user ID. Check format of authorized_keys file.'
    code = 9


class RepoPathArgumentIsNotAString(FilterException):
    error_message = 'The repository path argument is not a string'
    code = 10


def main(argv):
    valid_commands = ['git-receive-pack', 'git-upload-archive', 'git-upload-pack']
    if len(argv) < 4:
        raise MissingArguments()
    if len(argv) > 4:
        raise TooManyArguments()
    try:
        user_id = int(argv[1])
    except:
        raise CannotParseUserId()
    git_cmd = argv[2]
    repo_path_arg = argv[3]
    # the [1:-1] index is to remove the extraneous double-quotes around the string
    if repo_path_arg[0] != "'" or repo_path_arg[-1] != "'":
        raise RepoPathArgumentIsNotAString()
    # eliminate the leading and trailing single-quote
    repo_path = repo_path_arg[1:-1]
    # First character of repo path can be a '/'.
    # This happens when the clone URL contains a port specifier.
    # For example:
    # git clone ssh://git@dev:2222/facebook/redux-tools
    if repo_path[0] == '/':
        repo_path = repo_path[1:]
    # Repo path should at least 3 characters: 1 for the org, 1 '/', and 1 for the repo
    if len(repo_path) < 3:
        raise InvalidGitDirectoryTooShort()
    git_dir = join(GIT_ROOT, repo_path)
    if git_cmd not in valid_commands:
        raise InvalidCommand()
    if not exists(git_dir):
        raise GitDirDoesNotExist()
    user_ids_path = join(git_dir, '.git', 'authorized_users')
    if not exists(user_ids_path):
        raise MissingAuthorizedUsersFile()
    user_ids = []
    authenticated = False
    with open(user_ids_path, 'r') as f:
        for line in f:
            if int(line) == user_id:
                authenticated = True
                break

    if not authenticated:
        raise UnauthorizedUser()
    logger.info('Successfull authentication with: {}'.format(argv))

    original_cmd = [git_cmd, git_dir]
    call(original_cmd)

if __name__ == '__main__':
    try:
        main(argv)
    except FilterException as e:
        logger.warning(e.message)
        exit(e.code)
